#!/usr/bin/env bash
# ~/.functions

# diff with colors
function diff {
    colordiff -u "$@"
}

# forwarded port ${2} on server to ${1} on the local (client)
# Usage: ssh-forward 5900 5901 login@remote-server
ssh-forward () {
    # shellcheck disable=SC2029
    ssh -L "${1}":localhost:"${2}" -N -f "${3}"
}

# create SOCKS 5 proxy on local (client) at port ${1}
# Usage: ssh-socks 9999 login@remote-server
ssh-socks () {
    # shellcheck disable=SC2029
    ssh -f -C2qTnN -D "${1}" "${2}"
}

# Get information about IP address
ipinfo () {
    curl -s -H "Authorization: Bearer ${IPINFO_TOKEN}" "ipinfo.io/$*"
}

# Lookup MAC vendor
macvendors () {
    curl -G "https://api.macvendors.com/v1/lookup/$*" \
         -H "Authorization: Bearer ${MACVENDORS_TOKEN}" \
         -H "Accept: text/plain"
}

### OpenSSL shortcut ###
openssl-view-certificate () {
    openssl x509 -text -noout -in "${1}"
}

openssl-view-csr () {
    openssl req -text -noout -verify -in "${1}"
}

openssl-view-key () {
    openssl rsa -check -in "${1}"
}

openssl-view-pkcs12 () {
    openssl pkcs12 -info -in "${1}"
}

# Connecting to a server (Ctrl C exits)
openssl-client () {
    openssl s_client -status -connect "${1}":443
}

# Convert PEM private key, PEM certificate and PEM CA certificate (used by nginx, Apache, and other openssl apps) to a PKCS12 file (typically for use with Windows or Tomcat)
openssl-convert-pem-to-p12 () {
    openssl pkcs12 -export -inkey "${1}" -in "${2}" -certfile "${3}" -out "${4}"
}

# Convert a PKCS12 file to PEM
openssl-convert-p12-to-pem () {
    openssl pkcs12 -nodes -in "${1}" -out "${2}"
}

# Check the modulus of a certificate (to see if it matches a key)
openssl-check-certificate-modulus () {
    openssl x509 -noout -modulus -in "${1}" | shasum -a 256
}

# Check the modulus of a key (to see if it matches a certificate)
openssl-check-key-modulus () {
    openssl rsa -noout -modulus -in "${1}" | shasum -a 256
}

# Check the modulus of a certificate request
openssl-check-key-modulus () {
    openssl req -noout -modulus -in "${1}" | shasum -a 256
}

# Encrypt a file (because zip crypto isn't secure)
openssl-encrypt () {
    openssl aes-256-cbc -salt -in "${1}" -out "${2}"
}

# Decrypt a file
openssl-decrypt () {
    openssl aes-256-cbc -d -in "${1}" -out "${2}"
}

# Public Diffie-Hellman Parameter Service/Tool
# https://2ton.com.au/dhtool/
dhparam () {
    size=${1:-4096}
    curl -sSL "https://2ton.com.au/dhparam/$size" -o dhparam.pem
}

weather () {
    location=${1:-sgn} # sgn: HCM, han: HN
    curl -4 "http://wttr.in/${location}"
}

# bashlogger
bashlogger () {
    script /tmp/log.txt
}

# echo "You can simulate on-screen typing just like in the movies" | pv -qL 10
typing-echo () {
    echo "$@" | pv -qL 10
}

# fast-sync user@<source>:<source_dir> <dest_dir>
fast-sync () {
    rsync -aHAXxv --numeric-ids --delete --progress \
          -e "ssh -T -c arcfour -o Compression=no -x" "$@"
}

# htpasswd
htpasswd () {
    printf "Username: "
    read -r LOGIN_USER
    printf "%s:$(openssl passwd -apr1)\\n" "${LOGIN_USER}"
}
# End of file
