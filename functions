#!/usr/bin/env bash
# ~/.functions

# diff with colors
function diff {
    colordiff -u "$@"
}

# build golang static binary (useful for dockerize)
# Usage: go_build_static -o app app.go
function go_build_static () {
    version=${version:-dev}
    timestamp="$(TZ=UTC date -u '+%Y-%m-%dT%H:%M:%SZ')"
    commit=$(git rev-parse HEAD)

    # GOOS=linux GOARCH=amd64
    CGO_ENABLED=0 go build -a -ldflags "-s -w \
                                        -extldflags '-static' \
                                        -X main.Version=${version} \
                                        -X main.BuildTime=${timestamp} \
                                        -X main.GitHash=${commit}" "$@"
}


# forwarded port ${2} on server to ${1} on the local (client)
# Usage: ssh-forward 5900 5901 login@remote-server
ssh-forward () {
    # shellcheck disable=SC2029
    ssh -L "${1}":localhost:"${2}" -N -f "${3}"
}

# create SOCKS 5 proxy on local (client) at port ${1}
# Usage: ssh-socks 9999 login@remote-server
ssh-socks () {
    # shellcheck disable=SC2029
    ssh -f -C2qTnN -D "${1}" "${2}"
}

# Get information about IP address
ipinfo () {
    curl -s "ipinfo.io/$*?token=${IPINFO_TOKEN}"
}

# Lookup MAC vendor
macvendors () {
    curl -G "https://api.macvendors.com/v1/lookup/$*" \
         -H "Authorization: Bearer ${MACVENDORS_TOKEN}" \
         -H "Accept: text/plain"
}

### OpenSSL shortcut ###
openssl-view-certificate () {
    openssl x509 -text -noout -in "${1}"
}

openssl-view-csr () {
    openssl req -text -noout -verify -in "${1}"
}

openssl-view-key () {
    openssl rsa -check -in "${1}"
}

openssl-view-pkcs12 () {
    openssl pkcs12 -info -in "${1}"
}

# Connecting to a server (Ctrl C exits)
openssl-client () {
    openssl s_client -status -connect "${1}":443
}

# Convert PEM private key, PEM certificate and PEM CA certificate (used by nginx, Apache, and other openssl apps) to a PKCS12 file (typically for use with Windows or Tomcat)
openssl-convert-pem-to-p12 () {
    openssl pkcs12 -export -inkey "${1}" -in "${2}" -certfile "${3}" -out "${4}"
}

# Convert a PKCS12 file to PEM
openssl-convert-p12-to-pem () {
    openssl pkcs12 -nodes -in "${1}" -out "${2}"
}

# Check the modulus of a certificate (to see if it matches a key)
openssl-check-certificate-modulus () {
    openssl x509 -noout -modulus -in "${1}" | shasum -a 256
}

# Check the modulus of a key (to see if it matches a certificate)
openssl-check-key-modulus () {
    openssl rsa -noout -modulus -in "${1}" | shasum -a 256
}

# Check the modulus of a certificate request
openssl-check-key-modulus () {
    openssl req -noout -modulus -in "${1}" | shasum -a 256
}

# Encrypt a file (because zip crypto isn't secure)
openssl-encrypt () {
    openssl aes-256-cbc -salt -in "${1}" -out "${2}"
}

# Decrypt a file
openssl-decrypt () {
    openssl aes-256-cbc -d -in "${1}" -out "${2}"
}

# Public Diffie-Hellman Parameter Service/Tool
# https://2ton.com.au/dhtool/
dhparam () {
    size=${1:-4096}
    curl -sSL "https://2ton.com.au/dhparam/$size" -o dhparam.pem
}

weather () {
    location=${1:-sgn} # sgn: HCM, han: HN
    curl -4 "http://wttr.in/${location}"
}

# bashlogger
bashlogger () {
    script /tmp/log.txt
}

if [[ "$OSTYPE" = linux* ]] ; then
    # Install docker-compose latest version
    install-dcp () {
        fname="docker-compose-$(uname -s)-$(uname -m)"
        fbin="${BIN_DIR}/docker-compose"
        fcomp="$HOME/.local/share/zsh/site-functions/_docker-compose"

        repos_dl="https://github.com/docker/compose/releases/download"
        repos_api="https://api.github.com/repos/docker/compose/releases/latest"
        version=$(curl -sSL ${repos_api} | jq -r '. | .tag_name')

        # download and install binary
        /bin/rm -f "$fbin"
        curl -sSL "${repos_dl}/${version}/${fname}" -o "${fbin}"
        chmod +x "$fbin"

        # download and install zsh completion
        /bin/rm -f "${fcomp}"
        curl -sSL https://raw.githubusercontent.com/docker/compose/"${version}"/contrib/completion/zsh/_docker-compose -o "${fcomp}"
    }

    # Install docker-machine latest version
    install-dcm () {
        fname="docker-machine-$(uname -s)-$(uname -m)"
        fbin="${BIN_DIR}/docker-machine"
        fcomp="$HOME/.local/share/zsh/site-functions/_docker-machine"

        repos_dl="https://github.com/docker/machine/releases/download"
        repos_api="https://api.github.com/repos/docker/machine/releases/latest"
        version=$(curl -sSL ${repos_api} | jq -r '. | .tag_name')

        # download and install binary
        /bin/rm -f "$fbin"
        curl -sSL "${repos_dl}/${version}/${fname}" -o "${fbin}"
        chmod +x "$fbin"

        # download and install zsh completion
        /bin/rm -f "${fcomp}"
        curl -sSL https://raw.githubusercontent.com/docker/machine/"${version}"/contrib/completion/zsh/_docker-machine -o "${fcomp}"
    }

    # Install Protobuf complier latest version
    install-protoc () {
        repos_api="https://api.github.com/repos/google/protobuf/releases/latest"
        # remove first character with ${VAR#?}
        version=${$(curl -sSL $repos_api | jq -r '. | .tag_name')#?}
        repos_dl="https://github.com/google/protobuf/releases/download/v${version}/protoc-${version}-linux-x86_64.zip"
        curl -sSL $repos_dl -o /tmp/protoc.zip
        sudo unzip -qq -o -d /usr/local/ /tmp/protoc.zip
        sudo chmod +x /usr/local/bin/protoc
        /bin/rm -f /tmp/protoc.zip
    }


    # install cli53
    install-cli53 () {
        fname="cli53-linux-amd64"
        fbin="${BIN_DIR}/cli53"
        repos_dl="https://github.com/barnybug/cli53/releases/download"
        repos_api="https://api.github.com/repos/barnybug/cli53/releases/latest"
        version=$(curl -sSL $repos_api | jq -r '. | .tag_name')
        /bin/rm -f "$fbin"
        curl -sSL $repos_dl/"$version"/"$fname" -o "$fbin"
        chmod +x "$fbin"
    }


    # Install hugo
    install-hugo () {
        readonly version=$(curl -sSL https://api.github.com/repos/gohugoio/hugo/releases/latest | jq -r '. | .tag_name')
        curl -sSL "https://github.com/gohugoio/hugo/releases/download/${version}/hugo_${version#?}_Linux-64bit.tar.gz" | tar -C "${BIN_DIR}" -xzf - hugo
    }

    # Usage: install-kubectl v1.8.1
    install-kubectl() {
        #shellcheck disable=SC2155
        readonly current=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
        readonly version=${1:-$current}
        echo "installing kubectl $version"
        curl -sSL "https://dl.k8s.io/${version}/bin/linux/amd64/kubectl" \
             -o ~/Applications/google-cloud-sdk/bin/kubectl
    }

    # Usage: install-helm v2.0.7
    install-helm() {
        readonly current=$(curl -sSL https://api.github.com/repos/kubernetes/helm/releases/latest | jq -r '. | .tag_name')
        readonly version=${1:-$current}
        curl -sSL "https://kubernetes-helm.storage.googleapis.com/helm-${version}-linux-amd64.tar.gz" | tar -C "${BIN_DIR}" -xzf - --strip-components=1 linux-amd64/helm
    }

    # Usage: install-minikube
    install-minikube() {
        version=${1:-latest}
        curl -sSL "https://storage.googleapis.com/minikube/releases/${version}/minikube-linux-amd64" \
             -o "$BIN_DIR/minikube"
    }

    # Usage: install-kops 1.7.1
    install-kops() {
        readonly current=$(curl -sSL https://api.github.com/repos/kubernetes/kops/releases/latest | jq -r '. | .tag_name')
        readonly version=${1:-$current}
        curl -sSL "https://github.com/kubernetes/kops/releases/download/${version}/kops-linux-amd64" \
             -o "$BIN_DIR/kops"
    }

    # Usage: install-shellcheck
    install-shellcheck() {
        curl -sSL https://storage.googleapis.com/shellcheck/shellcheck-stable.linux.x86_64.tar.xz | tar -C "${BIN_DIR}" -Jxf - --strip-components=1 shellcheck-stable/shellcheck
    }

    # Usage: pia sgn up/down
    pia() {
        location=${1:-sgn}
        action=${2:-up}
        case ${location} in
            hk )
                nmcli con "${action}" id 'PIA - Hong Kong'
                ;;
            us )
                nmcli con "${action}" id 'PIA - US West'
                ;;
            * )
                nmcli con "${action}" id 'PIA - Singapore'
                ;;
        esac
    }

fi

transfer() {
    # check arguments
    if [ $# -eq 0 ];
    then
        printf "No arguments specified. Usage:\\necho transfer /tmp/test.md\\ncat /tmp/test.md | transfer test.md"
        return 1
    fi

    # get temporarily filename, output is written to this file show progress can be showed
    tmpfile=$( mktemp -t transferXXX )

    # upload stdin or file
    file=$1

    if tty -s;
    then
        basefile=$(basename "$file" | sed -e 's/[^a-zA-Z0-9._-]/-/g')

        if [ ! -e "$file" ];
        then
            echo "File $file doesn't exists."
            return 1
        fi

        if [ -d "$file" ];
        then
            # zip directory and transfer
            zipfile=$( mktemp -t transferXXX.zip )
            cd "$(dirname "$file")" && zip -r -q - "$(basename "$file")" >> "$zipfile"
            curl --progress-bar --upload-file "$zipfile" "https://transfer.sh/$basefile.zip" >> "$tmpfile"
            rm -f "$zipfile"
        else
            # transfer file
            curl --progress-bar --upload-file "$file" "https://transfer.sh/$basefile" >> "$tmpfile"
        fi
    else
        # transfer pipe
        curl --progress-bar --upload-file "-" "https://transfer.sh/$file" >> "$tmpfile"
    fi

    # cat output link
    cat "$tmpfile"

    # cleanup
    rm -f "$tmpfile"
}

# echo "You can simulate on-screen typing just like in the movies" | pv -qL 10
typing-echo () {
    echo "$@" | pv -qL 10
}

# fast-sync user@<source>:<source_dir> <dest_dir>
fast-sync () {
    rsync -aHAXxv --numeric-ids --delete --progress \
          -e "ssh -T -c arcfour -o Compression=no -x" "$@"
}

# htpasswd
htpasswd () {
    printf "Username: "
    read -r LOGIN_USER
    printf "%s:$(openssl passwd -apr1)\\n" "${LOGIN_USER}"
}
# End of file
