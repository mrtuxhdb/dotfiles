#!/usr/bin/env zsh
# ~/.zshrc

### Zplugin Module ###
module_path+=("$HOME/.zplugin/bin/zmodules/Src")
zmodload zdharma/zplugin

### Zplugin ###
source "$HOME/.zplugin/bin/zplugin.zsh"
autoload -Uz _zplugin
(( ${+_comps} )) && _comps[zplugin]=_zplugin

# Tilix
# https://github.com/gnunn1/tilix/wiki/VTE-Configuration-Issue
if [[ "$OSTYPE" == linux* ]]; then
  if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
    source /etc/profile.d/vte.sh
  fi
fi

# 256color ZSH Plugin
zplugin ice wait lucid
zplugin light "chrissicool/zsh-256color"

# zsh-completions
zplugin ice wait lucid blockf atpull'zplugin creinstall -q .'
zplugin light zsh-users/zsh-completions

# Yet another zsh completion sources library
zplugin ice wait lucid blockf atpull'zplugin creinstall -q .'
zplugin light zchee/zsh-completions

# syntax highlighting
zplugin ice wait'!1' lucid atinit"zpcompinit; zpcdreplay"
zplugin light zsh-users/zsh-syntax-highlighting

zplugin ice wait'!1' lucid atinit"zpcompinit; zpcdreplay"
zplugin light zdharma/fast-syntax-highlighting

# autosuggestions
# Using Ctrl-Space for quick execute suggest command
zplugin ice wait'!2' lucid atload"_zsh_autosuggest_start; bindkey '^ ' autosuggest-execute"
zplugin light zsh-users/zsh-autosuggestions

# zsh-autopair
zplugin ice wait'!2' lucid atinit"zpcompinit; zpcdreplay"
zplugin light hlissner/zsh-autopair

### OMZ ###
zplugin ice svn multisrc'{clipboard,completion,directories,functions,git,grep,history,key-bindings,misc,termsupport,theme-and-appearance}.zsh' pick'/dev/null'
zplugin snippet OMZ::lib

# asdf
zplugin ice svn lucid
zplugin snippet OMZ::plugins/asdf

# history-substring-search
zplugin ice wait lucid
zplugin light zsh-users/zsh-history-substring-search
# Bind terminal-specific up and down keys
# Bind in both emacs and vi modes so it works in both, and is not
# sensitive to whether this is loaded before or after the vi-mode plugin
if [[ -n "$terminfo[kcuu1]" ]]; then
  bindkey -M emacs "$terminfo[kcuu1]" history-substring-search-up
  bindkey -M viins "$terminfo[kcuu1]" history-substring-search-up
fi
if [[ -n "$terminfo[kcud1]" ]]; then
  bindkey -M emacs "$terminfo[kcud1]" history-substring-search-down
  bindkey -M viins "$terminfo[kcud1]" history-substring-search-down
fi

# bind P and N for EMACS mode
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down

# bind k and j for VI mode
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# history-search-multi-word
zplugin ice wait lucid
zplugin light zdharma/history-search-multi-word

# gpg-agent
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/gpg-agent

# git
zplugin ice svn wait atload"unalias grv" lucid
zplugin snippet OMZ::plugins/git

# Gitignore plugin – commands gii and gi
zplugin ice wait lucid
zplugin light voronkovich/gitignore.plugin.zsh

# grv
zplugin ice wait lucid from"gh-r" as"program" mv"grv* -> grv"
zplugin light rgburke/grv

# extract
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/extract

# encode64
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/encode64

# alias-tips
zplugin ice wait lucid pick"alias-tips.plugin.zsh"
zplugin light djui/alias-tips

# encode64
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/encode64

# vi-mode
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/vi-mode
# vi mode key timeout
export KEYTIMEOUT=1

# nmap
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/nmap

# gcloud
export CLOUDSDK_HOME="${HOME}/Applications/google-cloud-sdk"
zplugin ice svn lucid
zplugin snippet OMZ::plugins/gcloud

# kubectl
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/kubectl

# helm
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/helm

# kops
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/kops

# minikube
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/minikube

# ripgrep
zplugin ice svn wait as"completion" lucid
zplugin snippet OMZ::plugins/ripgrep

# rsync
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/rsync

# sublime
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/sublime

# sudo
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/sudo

# systemd
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/systemd

# ubuntu
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/ubuntu

# poetry
zplugin ice wait as"completion" id-as"poetry" lucid \
  atclone"poetry completions zsh > _poetry" atpull"%atclone" nocompile"!"
zplugin light zdharma/null

# rclone
zplugin ice wait as"completion" id-as"rclone" lucid \
  atclone"rclone genautocomplete zsh _rclone" atpull"%atclone" nocompile"!"
zplugin light zdharma/null

# Confluent CLI & Confluent Cloud CLI
zplugin ice wait as"completion" id-as"confluent-platform" lucid \
  atclone"ccloud completion zsh > _ccloud; confluent completion zsh > _confluent" atpull"%atclone" nocompile"!"
zplugin light zdharma/null

# kubectx
zplugin ice wait lucid as"program" pick"kube{ctx,ns}" \
  atclone"cp completion/kubectx.zsh _kubectx; cp completion/kubens.zsh _kubens" \
  atpull'!git reset --hard' nocompile"!"
zplugin light ahmetb/kubectx

# diff-so-fancy
zplugin ice wait lucid as"program" pick"bin/git-dsf"
zplugin light zdharma/zsh-diff-so-fancy

# fzf binary
zplugin ice wait lucid from"gh-r" as"program"
zplugin light junegunn/fzf-bin

# fz
zplugin ice load'![[ -x z && -x fzf ]]'
zplugin ice wait lucid as"program" cp"fz.sh -> fz" pick"fz" \
  atpull'!git reset --hard'
zplugin light changyuheng/fz

# z
zplugin ice wait lucid as"program" cp"z.sh -> z" pick"z" src"z.sh" \
  atpull'!git reset --hard'
zplugin light rupa/z

# direnv
zplugin ice wait from"gh-r" as"program" lucid mv"direnv* -> direnv" \
  atclone'./direnv hook zsh > zhook.zsh' atpull'%atclone' \
  pick"direnv" src"zhook.zsh"
zplugin light direnv/direnv

# miller
zplugin ice wait lucid from"gh-r" as"program" mv"mlr* -> mlr"
zplugin light johnkerl/miller

# yank
zplugin ice wait lucid as"program" pick"yank" make
zplugin light mptre/yank

# docker
zplugin ice svn wait lucid id-as"docker-completion" as"completion"
zplugin snippet https://github.com/docker/cli/trunk/contrib/completion/zsh/

# docker-compose
zplugin ice svn wait lucid id-as"docker-compose-completion" as"completion"
zplugin snippet https://github.com/docker/compose/trunk/contrib/completion/zsh/
zplugin ice svn wait lucid nocompletions
zplugin snippet OMZ::plugins/docker-compose

# docker-machine
zplugin ice svn wait lucid id-as"docker-machine-completion" as"completion"
zplugin snippet https://github.com/docker/machine/trunk/contrib/completion/zsh/
zplugin ice svn wait lucid nocompletions
zplugin snippet OMZ::plugins/docker-machine

# manydots-magic
zplugin ice wait'!1' lucid atinit"zpcompinit; zpcdreplay" pick"manydots-magic"
zplugin light "knu/zsh-manydots-magic"

# zsh-titles
zplugin ice wait lucid
zplugin light jreese/zsh-titles

# zsh-proxy
zplugin ice wait lucid
zplugin light SukkaW/zsh-proxy

# terraform
zplugin ice wait lucid
zplugin light _local/terraform

# rust
zplugin ice wait as"completion" id-as"rust-completion" lucid \
  atclone"rustup completions zsh > _rustup; rustup completions zsh cargo > _cargo" \
  atpull"%atclone" nocompile"!"
zplugin light zdharma/null

# color logger
zplugin ice wait as"program" lucid src"color-logger.bash" pick"/dev/null"
zplugin light swyckoff/color-logger-bash

# For GNU ls (the binaries can be gls, gdircolors, e.g. on OS X when installing the
# coreutils package from Homebrew or using https://github.com/ogham/exa)
zplugin ice atclone"dircolors -b dircolors.256dark > clrs.zsh" \
  atpull'%atclone' pick"clrs.zsh" nocompile'!' \
  atload'zstyle ":completion:*" list-colors "${(s.:.)LS_COLORS}"'
zplugin light seebi/dircolors-solarized

# zplugin ice atclone"dircolors -b LS_COLORS > clrs.zsh" \
#     atpull'%atclone' pick"clrs.zsh" nocompile'!' \
#     atload'zstyle ":completion:*" list-colors "${(s.:.)LS_COLORS}"'
# zplugin light trapd00r/LS_COLORS

### THEME ###
DEFAULT_USER=$USER
POWERLEVEL9K_MODE='nerdfont-complete'
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon root_indicator context time
  load battery status background_jobs
  disk_usage dir dir_writable vcs
  aws kubecontext virtualenv vi_mode)
POWERLEVEL9K_TIME_FOREGROUND='011'
POWERLEVEL9K_TIME_BACKGROUND='$DEFAULT_COLOR'
POWERLEVEL9K_TIME_FORMAT="%D{%H:%M:%S}"
POWERLEVEL9K_RAM_ELEMENTS="ram_free"
POWERLEVEL9K_STATUS_VERBOSE=false

POWERLEVEL9K_PROMPT_ON_NEWLINE=true
POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX="╭─"
POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX="╰─%B➤%b "
POWERLEVEL9K_DISABLE_RPROMPT=true
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()

POWERLEVEL9K_SHORTEN_DIR_LENGTH=2
POWERLEVEL9K_SHORTEN_STRATEGY="truncate_right"

POWERLEVEL9K_NODE_VERSION_BACKGROUND='022'
POWERLEVEL9K_VIRTUALENV_BACKGROUND='blue'
POWERLEVEL9K_KUBECONTEXT_BACKGROUND='027'

zplugin ice depth=1
zplugin light romkatv/powerlevel10k

# # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
# [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# bind Alt+. to insert last argument of last command
bindkey -M viins '\e.' insert-last-word

### Customize ENV, aliases and functions ###
[[ -s "${HOME}/.aliases" ]] && source "${HOME}/.aliases"
[[ -s "${HOME}/.functions" ]] && source "${HOME}/.functions"
[[ -s "${HOME}/.secrets" ]] && source "${HOME}/.secrets"

# ssh hostname completion
# only completion hostname in ~/.ssh/config
zstyle -e ':completion:*:hosts' hosts 'reply=(${=${${${${(@M)${(f)"$(cat ~/.ssh/config 2>/dev/null)"}:#Host *}#Host }:#*\**}:#*\?*}})'

# Prettify path
if [ -n "$($SHELL -c "echo $ZSH_VERSION")" ]; then
  # remove duplicates in zsh path
  # https://til.hashrocket.com/posts/7evpdebn7g-remove-duplicates-in-zsh-path
  # shellcheck disable=SC2034
  typeset -aU path
# elif [ -n "$($SHELL -c "echo $BASH_VERSION")" ]; then
else
  PATH="$(perl -e 'print join(":", grep { not $seen{$_}++ } split(/:/, $ENV{PATH}))')"
fi

# spacevim/neovim
# shellcheck disable=SC2155
export PYTHON_HOST_PROG="$(asdf which python)"
# shellcheck disable=SC2155
export PYTHON3_HOST_PROG="$(asdf which python3)"

# Clear screen
# clear

# End of ~/.zshrc