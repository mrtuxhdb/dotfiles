#!/usr/bin/env zsh
# ~/.zshrc

### Zplugin Module ###
module_path+=("$HOME/.zplugin/bin/zmodules/Src")
zmodload zdharma/zplugin

### Zplugin ###
source "$HOME/.zplugin/bin/zplugin.zsh"
autoload -Uz _zplugin
(( ${+_comps} )) && _comps[zplugin]=_zplugin

# 256color ZSH Plugin
zplugin ice wait lucid
zplugin light "chrissicool/zsh-256color"

# zsh-completions
zplugin ice wait lucid blockf atpull'zplugin creinstall -q .'
zplugin light zsh-users/zsh-completions

# Yet another zsh completion sources library
zplugin ice wait lucid blockf atpull'zplugin creinstall -q .'
zplugin light zchee/zsh-completions

# syntax highlighting
zplugin ice wait'!1' lucid atinit"zpcompinit; zpcdreplay"
zplugin light zsh-users/zsh-syntax-highlighting

zplugin ice wait'1b' lucid atinit"ZPLGM[COMPINIT_OPTS]=-C; zpcompinit; zpcdreplay"
zplugin light zdharma/fast-syntax-highlighting

# autosuggestions
# Using Ctrl-Space for quick execute suggest command
zplugin ice wait'!1' lucid atload"!_zsh_autosuggest_start; bindkey '^ ' autosuggest-execute"
zplugin light zsh-users/zsh-autosuggestions

# zsh-autopair
zplugin ice wait'!1' lucid atinit"zpcompinit; zpcdreplay"
zplugin light hlissner/zsh-autopair

### OMZ ###
zplugin ice svn multisrc'{clipboard,completion,directories,functions,git,grep,history,key-bindings,misc,termsupport,theme-and-appearance}.zsh' pick'/dev/null'
zplugin snippet OMZ::lib

# asdf
zplugin ice svn lucid
zplugin snippet OMZ::plugins/asdf

# history-substring-search
zplugin ice wait lucid
zplugin light zsh-users/zsh-history-substring-search

# history-search-multi-word
zplugin ice wait lucid
zplugin light zdharma/history-search-multi-word

# gpg-agent
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/gpg-agent

# git
zplugin ice svn wait atload"unalias grv" lucid
zplugin snippet OMZ::plugins/git

# Gitignore plugin – commands gii and gi
zplugin ice wait lucid
zplugin light voronkovich/gitignore.plugin.zsh

# grv
zplugin ice wait lucid from"gh-r" as"program" mv"grv* -> $ZPFX/bin/grv" pick"$ZPFX/bin/grv"
zplugin light rgburke/grv

# aws
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/aws

# extract
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/extract

# encode64
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/encode64

# alias-tips
zplugin ice wait lucid
zplugin light djui/alias-tips

# encode64
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/encode64

# vi-mode
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/vi-mode
# vi mode key timeout
export KEYTIMEOUT=1

# nmap
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/nmap

# gcloud
export CLOUDSDK_HOME="${HOME}/Applications/google-cloud-sdk"
zplugin ice svn lucid
zplugin snippet OMZ::plugins/gcloud

# kubectl
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/kubectl

# helm
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/helm

# kops
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/kops

# minikube
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/minikube

# # ripgrep
# zplugin ice svn wait as"completion" lucid
# zplugin snippet OMZ::plugins/ripgrep

# rsync
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/rsync

# sublime
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/sublime

# sudo
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/sudo

# systemd
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/systemd

# ubuntu
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/ubuntu

# npm
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/npm

# yarn
zplugin ice svn wait lucid
zplugin snippet OMZ::plugins/yarn

# zsh-diff-so-fancy
zplugin ice wait lucid as"program" pick"bin/git-dsf"
zplugin light zdharma/zsh-diff-so-fancy

# fzf
zplugin ice depth=1 wait lucid \
  atclone"./install --no-update-rc --key-bindings --completion" \
  atpull"%atclone" src"$HOME/.fzf.zsh" pick"/dev/null"
zplugin light junegunn/fzf

# z
zplugin ice wait lucid cp"z.sh -> $ZPFX/bin/z" pick"$ZPFX/bin/z" src"z.sh"
zplugin light rupa/z

# fz
zplugin ice load'![[ -x z && -x fzf ]]'
zplugin ice wait"2" lucid
zplugin light changyuheng/fz

# enhancd with fzf
export ENHANCD_FILTER=fzf
export ENHANCD_DISABLE_DOT=1
export ENHANCD_DISABLE_HYPHEN=1
export ENHANCD_DISABLE_HOME=1
zplugin ice wait lucid pick"init.sh"
zplugin light b4b4r07/enhancd

# direnv
zplugin ice wait from"gh-r" as"program" lucid mv"direnv* -> $ZPFX/bin/direnv" \
  atclone"$ZPFX/bin/direnv hook zsh > zhook.zsh" atpull"%atclone" \
  pick"$ZPFX/bin/direnv" src"zhook.zsh"
zplugin light direnv/direnv

# poetry
zplugin ice has"poetry" wait as"completion" id-as"poetry" lucid \
  atclone"git reset --hard; poetry completions zsh > _poetry" \
  atpull"%atclone"
zplugin light zdharma/null

# rclone
zplugin ice has"rclone" wait as"completion" id-as"rclone" lucid \
  atclone"git reset --hard; rclone genautocomplete zsh _rclone" \
  atpull"%atclone"
zplugin light zdharma/null

# Confluent Platform: ccloud / confluent
zplugin ice has"ccloud" wait as"completion" id-as"confluent-platform" lucid \
  atclone"git reset --hard; ccloud completion zsh > _ccloud; confluent completion zsh > _confluent" \
  atpull"%atclone"
zplugin light zdharma/null

# kubectx
zplugin ice wait lucid pick"$ZPFX/bin/kube{ctx,ns}" \
  atclone"git reset --hard; /bin/cp -f kube{ctx,ns} $ZPFX/bin/; cp completion/kubectx.zsh _kubectx; cp completion/kubens.zsh _kubens" \
  atpull"%atclone"
zplugin light ahmetb/kubectx

# rust
zplugin ice has"rustup" wait as"completion" id-as"rust-completion" lucid \
  atclone"git reset --hard; rustup completions zsh > _rustup; rustup completions zsh cargo > _cargo" \
  atpull"%atclone"
zplugin light zdharma/null

# miller
zplugin ice wait lucid from"gh-r" as"program" mv"mlr* -> $ZPFX/bin/mlr" pick"$ZPFX/bin/mlr"
zplugin light johnkerl/miller

# ogham/exa, replacement for ls
zplugin ice wait lucid from"gh-r" as"program" mv"exa* -> $ZPFX/bin/exa" pick"$ZPFX/bin/exa"
zplugin light ogham/exa
zplugin ice svn wait lucid id-as"exa-completion" as"completion" cp"completions.zsh -> _exa"
zplugin snippet https://github.com/ogham/exa/trunk/contrib/

# sharkdp/fd
zplugin ice wait lucid from"gh-r" as"command" \
  mv"fd* -> fd" \
  cp"fd/fd -> $ZPFX/bin/fd" \
  pick"$ZPFX/bin/fd"
zplugin light sharkdp/fd

# sharkdp/bat
zplugin ice wait lucid from"gh-r" as"command" \
  mv"bat* -> bat" \
  cp"bat/bat -> $ZPFX/bin/bat" \
  pick"$ZPFX/bin/bat"
zplugin light sharkdp/bat

# ripgrep
zplugin ice wait lucid from"gh-r" as"command" \
  mv"ripgrep* -> rg" \
  cp"ripgrep/rg -> $ZPFX/bin/rg" \
  pick"$ZPFX/bin/rg"
zplugin light BurntSushi/ripgrep

# jq
zplugin ice wait lucid from"gh-r" as"command" \
  mv"jq* -> $ZPFX/bin/jq" \
  pick"$ZPFX/bin/rg"
zplugin light stedolan/jq

# hub
zplugin ice wait lucid from"gh-r" as"command" \
  mv"hub* -> hub" \
  cp"hub/bin/hub -> $ZPFX/bin/hub" \
  pick"$ZPFX/bin/hub" \
  atclone"cp hub/etc/hub.zsh_completion _hub" \
  atpull"%atclone"
zplugin light github/hub

# yank
zplugin ice wait lucid as"program" pick"$ZPFX/bin/yank" make"PREFIX=$ZPFX install"
zplugin light mptre/yank

# tig
zplugin ice wait lucid as"program" \
  atclone"/bin/cp -f contrib/vim.tigrc ~/.tigrc.vim; /bin/cp -f contrib/git-flow.tigrc ~/.tigrc.git-flow; ./autogen.sh; ./configure --prefix=$ZPFX" \
  atpull"%atclone" \
  make"prefix=$ZPFX install" \
  pick"$ZPFX/bin/tig" \
  src"contrib/tig-completion.bash"
zplugin light jonas/tig

# docker
zplugin ice svn wait lucid id-as"docker-completion" as"completion"
zplugin snippet https://github.com/docker/cli/trunk/contrib/completion/zsh/

# docker-compose
zplugin ice svn wait lucid id-as"docker-compose-completion" as"completion"
zplugin snippet https://github.com/docker/compose/trunk/contrib/completion/zsh/
zplugin ice svn wait lucid nocompletions
zplugin snippet OMZ::plugins/docker-compose

# docker-machine
zplugin ice svn wait lucid id-as"docker-machine-completion" as"completion"
zplugin snippet https://github.com/docker/machine/trunk/contrib/completion/zsh/
zplugin ice svn wait lucid nocompletions
zplugin snippet OMZ::plugins/docker-machine

# manydots-magic
zplugin ice wait'!1' lucid atinit"zpcompinit; zpcdreplay" pick"manydots-magic"
zplugin light "knu/zsh-manydots-magic"

# zsh-titles
zplugin ice wait lucid
zplugin light jreese/zsh-titles

# zsh-proxy
zplugin ice wait lucid
zplugin light SukkaW/zsh-proxy

# resty
zplugin ice wait lucid
zplugin light micha/resty

# color logger
zplugin ice wait lucid src"color-logger.bash" pick"/dev/null"
zplugin light swyckoff/color-logger-bash

# calc
zplugin ice wait"2" lucid
zplugin light arzzen/calc.plugin.zsh

# For GNU ls (the binaries can be gls, gdircolors, e.g. on OS X when installing the
# coreutils package from Homebrew or using https://github.com/ogham/exa)
zplugin ice atclone"dircolors -b dircolors.ansi-dark > clrs.zsh" \
  atpull'%atclone' pick"clrs.zsh" nocompile'!' \
  atload'zstyle ":completion:*" list-colors "${(s.:.)LS_COLORS}"'
zplugin light seebi/dircolors-solarized

# zplugin ice atclone"dircolors -b LS_COLORS > clrs.zsh" \
#     atpull'%atclone' pick"clrs.zsh" nocompile'!' \
#     atload'zstyle ":completion:*" list-colors "${(s.:.)LS_COLORS}"'
# zplugin light trapd00r/LS_COLORS

### THEME ###
POWERLEVEL9K_MODE="nerdfont-complete"
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon load battery status disk_usage dir vcs aws kubecontext virtualenv vi_mode command_execution_time)
POWERLEVEL9K_TIME_FOREGROUND="011"
POWERLEVEL9K_TIME_BACKGROUND="$DEFAULT_COLOR"
POWERLEVEL9K_TIME_FORMAT="%D{%H:%M:%S}"
POWERLEVEL9K_RAM_ELEMENTS="ram_free"
POWERLEVEL9K_STATUS_VERBOSE=false
POWERLEVEL9K_PROMPT_ON_NEWLINE=true
POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX="╭─"
POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX="╰─%B➤%b "
POWERLEVEL9K_DISABLE_RPROMPT=true
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()
POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
POWERLEVEL9K_SHORTEN_STRATEGY="truncate_to_unique"
POWERLEVEL9K_NODE_VERSION_BACKGROUND="022"
POWERLEVEL9K_VIRTUALENV_BACKGROUND="blue"
POWERLEVEL9K_KUBECONTEXT_BACKGROUND="027"
POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND="011"
POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND="$DEFAULT_COLOR"
POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD="5"

zplugin ice depth=1
zplugin light romkatv/powerlevel10k

# TODO: switch to powerlevel10k 100%
# zplugin ice atload'!source ~/.p10k.zsh; _p9k_precmd' lucid
# zplugin load romkatv/powerlevel10k

# terraform
zplugin ice wait lucid
zplugin light thuandt/zsh-terraform

# my zsh customize config
zplugin ice wait lucid
zplugin light thuandt/zsh-config

# Username completion.
# Delete old definitions
zstyle -d users
# For SSH and related stuff, use remote users set in SSH configuration, plus root
zstyle ':completion:*:*:(ssh|scp|rsync|mosh|slogin):*' users root $(awk '$1 == "User" { print $2 }' ~/.ssh/config ~/.ssh/conf.d/* | sort -u)
# For everything else, use non-system users from /etc/passwd, plus root
zstyle ':completion:*:*:*:*' users root $(awk -F: '$3 >= 1000 && $3 < 65000 { print $1 }' /etc/passwd)

# ssh hostname completion
# https://serverfault.com/a/170481
h=()
if [[ -r ~/.ssh/config ]]; then
  h=($h ${${${(@M)${(f)"$(cat ~/.ssh/config ~/.ssh/conf.d/*)"}:#Host *}#Host }:#*[*?]*})
fi
# HashKnownHosts must be disabled
# if [[ -r ~/.ssh/known_hosts ]]; then
#   h=($h ${${${(f)"$(cat ~/.ssh/known_hosts{,2} || true)"}%%\ *}%%,*}) 2>/dev/null
# fi
if [[ $#h -gt 0 ]]; then
  zstyle ':completion:*:(ssh|scp|rsync|lftp|ftp|mosh|slogin):*' hosts $h
fi

# Hostname completion
zstyle -e ':completion:*:hosts' hosts 'reply=(${=${(f)"$(grep -v 0.0.0.0 /etc/hosts)"}%%\#*})'

# Prettify path
if [ -n "$($SHELL -c "echo $ZSH_VERSION")" ]; then
  # remove duplicates in zsh path
  # https://til.hashrocket.com/posts/7evpdebn7g-remove-duplicates-in-zsh-path
  # shellcheck disable=SC2034
  typeset -aU path
# elif [ -n "$($SHELL -c "echo $BASH_VERSION")" ]; then
else
  PATH="$(perl -e 'print join(":", grep { not $seen{$_}++ } split(/:/, $ENV{PATH}))')"
fi

# spacevim/neovim
# shellcheck disable=SC2155
export PYTHON_HOST_PROG="$(asdf which python)"
# shellcheck disable=SC2155
export PYTHON3_HOST_PROG="$(asdf which python3)"

# Key bindings
# bind Alt+. to insert last argument of last command
bindkey -M viins '\e.' insert-last-word

# Bind terminal-specific up and down keys
# Bind in both emacs and vi modes so it works in both, and is not
# sensitive to whether this is loaded before or after the vi-mode plugin
if [[ -n "$terminfo[kcuu1]" ]]; then
  bindkey -M emacs "$terminfo[kcuu1]" history-substring-search-up
  bindkey -M viins "$terminfo[kcuu1]" history-substring-search-up
fi
if [[ -n "$terminfo[kcud1]" ]]; then
  bindkey -M emacs "$terminfo[kcud1]" history-substring-search-down
  bindkey -M viins "$terminfo[kcud1]" history-substring-search-down
fi

# bind P and N for EMACS mode
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down

# bind k and j for VI mode
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# disable C-s stopping receiving keyboard signals.
stty start undef
stty stop undef

# Tilix
# https://github.com/gnunn1/tilix/wiki/VTE-Configuration-Issue
if [[ "$OSTYPE" == linux* ]]; then
  if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
    source /etc/profile.d/vte.sh
  fi
fi

# Don't store failed command to history
# http://scarff.id.au/blog/2019/zsh-history-conditional-on-command-success/
function zshaddhistory() {
  whence ${${(z)1}[1]} >| /dev/null || return 1
  local line cmd
  line=${1%%$'\n'}
  cmd=${line%% *}
  [[ ${#line} -ge 5 \
    && ${cmd} != (apm|base64|bzip2|cal|calc|cat|cd|chmod|cp|curl|cvs|date|df|diff|dig|disklabel|dmesg|doas|du|e|egrep|enc|ent|exiftool|f|fdisk|feh|file|find|gimp|git|gpg|grep|hdiutil|head|hostname|ifconfig|kill|less|ls|mail|make|man|mkdir|mount|mpv|mv|nc|openssl|patch|pdf|pdfinfo|pgrep|ping|pkg_info|pkill|ps|rcctl|rm|rsync|scp|scrot|set|sha256|sort|srm|ssh|stat|strip|sudo|sysctl|tar|tmux|top|umount|uname|unzip|uptime|useradd|vlc|vi|vim|wc|wget|which|whoami|whois|wireshark|xclip|xxd|youtube-dl)
  ]]
}

# Clear screen
# clear

# End of ~/.zshrc
