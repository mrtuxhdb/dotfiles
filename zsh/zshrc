#!/usr/bin/env zsh
# ~/.zshrc

# install zplugin
[[ ! -f ~/.zplugin/bin/zplugin.zsh ]] && {
    command mkdir -p ~/.zplugin
    command git clone https://github.com/zdharma/zplugin ~/.zplugin/bin
}

### Zplugin ###
source "$HOME/.zplugin/bin/zplugin.zsh"
autoload -Uz _zplugin
(( ${+_comps} )) && _comps[zplugin]=_zplugin

### Zplugin Module ###
module_path+=("$HOME/.zplugin/bin/zmodules/Src")
zmodload zdharma/zplugin

# compinit speed up loading
ZPLGM[COMPINIT_OPTS]=-C

#
# Bindkeys
#

autoload up-line-or-beginning-search down-line-or-beginning-search
autoload history-substring-search-up history-substring-search-down
autoload autosuggest-execute

zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
zle -N history-substring-search-up
zle -N history-substring-search-down
zle -N autosuggest-execute

bindkey -v

# bind Alt+. to insert last argument of last command
bindkey -M viins '\e.' insert-last-word

# # Using Ctrl-Space for quick execute suggest command
bindkey '^ ' autosuggest-execute

# Bind terminal-specific up and down keys
# Bind in both emacs and vi modes so it works in both, and is not
# sensitive to whether this is loaded before or after the vi-mode plugin
if [[ -n "$terminfo[kcuu1]" ]]; then
  bindkey -M emacs "$terminfo[kcuu1]" history-substring-search-up
  bindkey -M viins "$terminfo[kcuu1]" history-substring-search-up
fi
if [[ -n "$terminfo[kcud1]" ]]; then
  bindkey -M emacs "$terminfo[kcud1]" history-substring-search-down
  bindkey -M viins "$terminfo[kcud1]" history-substring-search-down
fi

# bind P and N for EMACS mode
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down

# bind k and j for VI mode
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# disable C-s stopping receiving keyboard signals.
stty start undef
stty stop undef


zplugin light zplugin/z-a-bin-gem-node
# zplugin light zplugin/z-a-man

# OMZ libs and plugins
zplugin light-mode lucid for \
                      OMZ::lib/clipboard.zsh \
                      OMZ::lib/completion.zsh \
                      OMZ::lib/directories.zsh \
                      OMZ::lib/functions.zsh \
                      OMZ::lib/git.zsh \
                      OMZ::lib/grep.zsh \
                      OMZ::lib/history.zsh \
                      OMZ::lib/key-bindings.zsh \
                      OMZ::lib/misc.zsh \
                      OMZ::lib/termsupport.zsh \
                      OMZ::lib/theme-and-appearance.zsh \
                      OMZ::plugins/asdf/asdf.plugin.zsh \
                      OMZ::plugins/gcloud/gcloud.plugin.zsh \
  atload"unalias grv" OMZ::plugins/git/git.plugin.zsh

# For GNU ls (the binaries can be gls, gdircolors, e.g. on OS X when installing the
# coreutils package from Homebrew or using https://github.com/ogham/exa)
zplugin ice wait"0c" lucid reset \
  atclone"dircolors -b dircolors.ansi-dark > clrs.zsh" \
  atpull"%atclone" pick"clrs.zsh" nocompile'!' \
  atload'zstyle ":completion:*" list-colors "${(s.:.)LS_COLORS}"'
zplugin light seebi/dircolors-solarized

# zplugin ice atclone"dircolors -b LS_COLORS > clrs.zsh" \
#     atpull'%atclone' pick"clrs.zsh" nocompile'!' \
#     atload'zstyle ":completion:*" list-colors "${(s.:.)LS_COLORS}"'
# zplugin light trapd00r/LS_COLORS

zplugin as"null" wait light-mode lucid \
  blockf atpull"zplugin creinstall -q ." for \
  zsh-users/zsh-completions \
  zchee/zsh-completions

zplugin wait light-mode lucid for \
  zsh-users/zsh-history-substring-search \
  zdharma/history-search-multi-word \
  OMZ::plugins/gpg-agent/gpg-agent.plugin.zsh \
  OMZ::plugins/aws/aws.plugin.zsh \
  OMZ::plugins/extract/extract.plugin.zsh \
  OMZ::plugins/encode64/encode64.plugin.zsh \
  OMZ::plugins/vi-mode/vi-mode.plugin.zsh \
  OMZ::plugins/nmap/nmap.plugin.zsh \
  OMZ::plugins/kubectl/kubectl.plugin.zsh \
  OMZ::plugins/helm/helm.plugin.zsh \
  OMZ::plugins/kops/kops.plugin.zsh \
  OMZ::plugins/minikube/minikube.plugin.zsh \
  OMZ::plugins/rsync/rsync.plugin.zsh \
  OMZ::plugins/sudo/sudo.plugin.zsh \
  OMZ::plugins/systemd/systemd.plugin.zsh \
  OMZ::plugins/ubuntu/ubuntu.plugin.zsh \
  OMZ::plugins/npm/npm.plugin.zsh \
  OMZ::plugins/yarn/yarn.plugin.zsh \
  OMZ::plugins/docker-compose/docker-compose.plugin.zsh \
  OMZ::plugins/docker-machine/docker-machine.plugin.zsh \
  chrissicool/zsh-256color \
  voronkovich/gitignore.plugin.zsh \
  djui/alias-tips \
  jreese/zsh-titles \
  SukkaW/zsh-proxy \
  amstrad/oh-my-matrix \
  iboyperson/pipenv-zsh \
  darvid/zsh-poetry \
  micha/resty \
  changyuheng/fz \
  make"PREFIX=$ZPFX install" mptre/yank \
  thuandt/zsh-terraform \
  thuandt/zsh-config

zplugin wait light-mode lucid atinit"zpcompinit; zpcdreplay" for \
  is-snippet id-as"docker/_docker" https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker \
  is-snippet id-as"docker/_docker-compose" https://github.com/docker/compose/blob/master/contrib/completion/zsh/_docker-compose \
  is-snippet id-as"docker/_docker-machine" https://github.com/docker/machine/blob/master/contrib/completion/zsh/_docker-machine

  # _arguments:comparguments:325: can only be called from completion function
  # is-snippet id-as"ogham/_exa" https://github.com/ogham/exa/blob/master/contrib/completions.zsh

# tig
zplugin ice wait lucid depth=1 \
  atclone"./autogen.sh; ./configure --prefix=$ZPFX" \
  atpull"/bin/cp -f contrib/vim.tigrc ~/.tigrc.vim; /bin/cp -f contrib/git-flow.tigrc ~/.tigrc.git-flow; ./autogen.sh; ./configure --prefix=$ZPFX" \
  make"prefix=$ZPFX install" \
  src"contrib/tig-completion.bash" \
  pick"/dev/null"
zplugin light jonas/tig

# z
zplugin ice wait lucid mv"z.sh -> z" pick"z" src"z.sh"
zplugin light rupa/z

# fzf completion
zplugin ice wait lucid multisrc"shell/*.zsh"
zplugin light junegunn/fzf

# enhancd with fzf
export ENHANCD_FILTER=fzf
export ENHANCD_DISABLE_DOT=1
export ENHANCD_DISABLE_HYPHEN=1
export ENHANCD_DISABLE_HOME=1
zplugin ice wait lucid pick"init.sh"
zplugin light b4b4r07/enhancd

# direnv
zplugin ice as"null" wait lucid from"gh-r" \
  mv"direnv* -> direnv" \
  sbin"" src"zhook.zsh" \
  atclone"./direnv hook zsh > zhook.zsh" atpull"%atclone"
zplugin light direnv/direnv

# poetry
zplugin ice has"poetry" wait as"completion" id-as"poetry" lucid \
  atclone"git reset --hard; poetry completions zsh > _poetry" \
  atpull"%atclone"
zplugin light zdharma/null

# rclone
zplugin ice has"rclone" wait as"completion" id-as"rclone" lucid \
  atclone"git reset --hard; rclone genautocomplete zsh _rclone" \
  atpull"%atclone"
zplugin light zdharma/null

# Confluent Platform: ccloud / confluent
zplugin ice has"ccloud" wait as"completion" id-as"confluent-platform" lucid \
  atclone"git reset --hard; ccloud completion zsh > _ccloud; confluent completion zsh > _confluent" \
  atpull"%atclone"
zplugin light zdharma/null

# kubectx
zplugin ice wait lucid pick"/dev/null" sbin"kubectx" sbin"kubens" \
  atclone"git reset --hard; ln -sf completion/kubectx.zsh _kubectx; ln -sf completion/kubens.zsh _kubens" \
  atpull"%atclone"
zplugin light ahmetb/kubectx

# rust
zplugin ice has"rustup" wait as"completion" id-as"rust-completion" lucid \
  atclone"git reset --hard; rustup completions zsh > _rustup; rustup completions zsh cargo > _cargo" \
  atpull"%atclone"
zplugin light zdharma/null

# color logger
zplugin ice wait lucid src"color-logger.bash" pick"/dev/null"
zplugin light swyckoff/color-logger-bash


zplugin wait"!1b" light-mode lucid for \
  atinit"zpcompinit; zpcdreplay" zsh-users/zsh-syntax-highlighting \
  atinit"zpcompinit; zpcdreplay" zdharma/fast-syntax-highlighting \
  atload"_zsh_autosuggest_start" zsh-users/zsh-autosuggestions \
  atinit"zpcompinit; zpcdreplay" hlissner/zsh-autopair

zplugin as"null" wait"2" light-mode lucid from"gh-r" for \
                              fbin"bin/git-dsf" \
                              sbin"bin/diff-so-fancy" \
                              fbin"bin/diff-so-fancy" \
                                                  zdharma/zsh-diff-so-fancy \
                              sbin""              isacikgoz/tldr \
    mv"exa* -> exa"           sbin""              ogham/exa \
    mv"mlr* -> mlr"           sbin""              johnkerl/miller \
    mv"jq* -> jq"             sbin""              stedolan/jq \
    mv"hadolint* -> hadolint" sbin""              hadolint/hadolint \
    mv"shfmt* -> shfmt"       sbin""              @mvdan/sh \
    mv"grv* -> grv"           sbin""              @rgburke/grv \
    mv"fd* -> fd"             sbin"fd/fd"         @sharkdp/fd \
    mv"ripgrep* -> rg"        sbin"rg/rg"         BurntSushi/ripgrep \
    mv"bat* -> bat"           sbin"bat/bat"       @sharkdp/bat \
                              sbin"fzf" fbin"fzf" junegunn/fzf-bin

# fz and calc
zplugin wait"2" light-mode lucid for \
  changyuheng/fz \
  arzzen/calc.plugin.zsh

# hub
zplugin ice wait"2" lucid from"gh-r" \
  mv"hub* -> hub" \
  sbin"hub/bin/hub" \
  pick"/dev/null" \
  atclone"ln -sf hub/etc/hub.zsh_completion _hub" \
  atpull"%atclone"
zplugin light github/hub

# manydots-magic
zplugin ice wait'!2' lucid atinit"zpcompinit; zpcdreplay" pick"manydots-magic"
zplugin light "knu/zsh-manydots-magic"

### THEME ###
POWERLEVEL9K_MODE="nerdfont-complete"
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon load battery status disk_usage dir vcs aws kubecontext virtualenv vi_mode command_execution_time)
POWERLEVEL9K_TIME_FOREGROUND="011"
POWERLEVEL9K_TIME_BACKGROUND="$DEFAULT_COLOR"
POWERLEVEL9K_TIME_FORMAT="%D{%H:%M:%S}"
POWERLEVEL9K_RAM_ELEMENTS="ram_free"
POWERLEVEL9K_STATUS_VERBOSE=false
POWERLEVEL9K_PROMPT_ON_NEWLINE=true
POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX="╭─"
POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX="╰─%B➤%b "
POWERLEVEL9K_DISABLE_RPROMPT=true
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()
POWERLEVEL9K_SHORTEN_DIR_LENGTH=2
POWERLEVEL9K_SHORTEN_STRATEGY="truncate_to_first_and_last"
POWERLEVEL9K_NODE_VERSION_BACKGROUND="022"
POWERLEVEL9K_VIRTUALENV_BACKGROUND="blue"
POWERLEVEL9K_KUBECONTEXT_BACKGROUND="027"
POWERLEVEL9K_AWS_BACKGROUND="yellow"
POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND="011"
POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND="$DEFAULT_COLOR"
POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD="5"

zplugin ice depth=1
zplugin light romkatv/powerlevel10k

# TODO: switch to powerlevel10k 100%
# zplugin ice atload'!source ~/.p10k.zsh; _p9k_precmd' lucid
# zplugin load romkatv/powerlevel10k

# Username completion.
# Delete old definitions
zstyle -d users
# For SSH and related stuff, use remote users set in SSH configuration, plus root
zstyle ':completion:*:*:(ssh|scp|rsync|mosh|slogin):*' users root $(awk '$1 == "User" { print $2 }' ~/.ssh/config ~/.ssh/conf.d/* | sort -u)
# For everything else, use non-system users from /etc/passwd, plus root
zstyle ':completion:*:*:*:*' users root $(awk -F: '$3 >= 1000 && $3 < 65000 { print $1 }' /etc/passwd)

# ssh hostname completion
# https://serverfault.com/a/170481
h=()
if [[ -r ~/.ssh/config ]]; then
  h=($h ${${${(@M)${(f)"$(cat ~/.ssh/config ~/.ssh/conf.d/*)"}:#Host *}#Host }:#*[*?]*})
fi
# HashKnownHosts must be disabled
# if [[ -r ~/.ssh/known_hosts ]]; then
#   h=($h ${${${(f)"$(cat ~/.ssh/known_hosts{,2} || true)"}%%\ *}%%,*}) 2>/dev/null
# fi
if [[ $#h -gt 0 ]]; then
  zstyle ':completion:*:(ssh|scp|rsync|lftp|ftp|mosh|slogin):*' hosts $h
fi

# Hostname completion
zstyle -e ':completion:*:hosts' hosts 'reply=(${=${(f)"$(grep -v 0.0.0.0 /etc/hosts)"}%%\#*})'

# Prettify path
if [ -n "$($SHELL -c "echo $ZSH_VERSION")" ]; then
  # remove duplicates in zsh path
  # https://til.hashrocket.com/posts/7evpdebn7g-remove-duplicates-in-zsh-path
  # shellcheck disable=SC2034
  typeset -aU path
# elif [ -n "$($SHELL -c "echo $BASH_VERSION")" ]; then
else
  PATH="$(perl -e 'print join(":", grep { not $seen{$_}++ } split(/:/, $ENV{PATH}))')"
fi

# spacevim/neovim
# shellcheck disable=SC2155
export PYTHON_HOST_PROG="$(asdf which python)"
# shellcheck disable=SC2155
export PYTHON3_HOST_PROG="$(asdf which python3)"

# Tilix
# https://github.com/gnunn1/tilix/wiki/VTE-Configuration-Issue
if [[ "$OSTYPE" == linux* ]]; then
  if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
    source /etc/profile.d/vte.sh
  fi
fi

# Don't store failed command to history
# http://scarff.id.au/blog/2019/zsh-history-conditional-on-command-success/
function zshaddhistory() {
  whence ${${(z)1}[1]} >| /dev/null || return 1
  local line cmd
  line=${1%%$'\n'}
  cmd=${line%% *}
  [[ ${#line} -ge 5 \
    && ${cmd} != (apm|base64|bzip2|cal|calc|cat|cd|chmod|cp|curl|cvs|date|df|diff|dig|disklabel|dmesg|doas|du|e|egrep|enc|ent|exiftool|f|fdisk|feh|file|find|gimp|git|gpg|grep|hdiutil|head|hostname|ifconfig|kill|less|ls|mail|make|man|mkdir|mount|mpv|mv|nc|openssl|patch|pdf|pdfinfo|pgrep|ping|pkg_info|pkill|ps|rcctl|rm|rsync|scp|scrot|set|sha256|sort|srm|ssh|stat|strip|sudo|sysctl|tar|tmux|top|umount|uname|unzip|uptime|useradd|vlc|vi|vim|wc|wget|which|whoami|whois|wireshark|xclip|xxd|youtube-dl)
  ]]
}

# Clear screen
# clear

# End of ~/.zshrc
