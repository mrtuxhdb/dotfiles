#!/bin/sh
# ~/.shell_env
# Last Modified: 12/04/2012 05:42:32 AM

# Add $HOME/.bin to PATH
export PATH=$HOME/.bin:$PATH

# Setup Input Method (Ibus)
export XMODIFIERS=@im=ibus
export GTK_IM_MODULE=ibus
export QT_IM_MODULE=ibus

# Setting locales
export LC_ALL=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8

export BROWSER="firefox -new-tab %s"
export EDITOR="vim"
export VISUAL="vim"

# Color man pages
export PAGER='less'
unset LESSCHARSET # Fix manpages looking funky
export LESS='-i -n -w  -z-4 -g -M -X -F -R'
    # Colorized less, woohoo
    export LESS_TERMCAP_mb=$'\E[01;31m'      # begin blinking
    export LESS_TERMCAP_md=$'\E[01;31m'      # begin bold
    export LESS_TERMCAP_me=$'\E[0m'          # end mode
    export LESS_TERMCAP_se=$'\E[0m'          # end standout-mode
    export LESS_TERMCAP_so=$'\E[01;44;33m'   # begin standout-mode - info box
    export LESS_TERMCAP_ue=$'\E[0m'          # end underline
    export LESS_TERMCAP_us=$'\E[01;32m'      # begin underline

##### Java Options #####
export _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GtkLookAndFeel"
# export JAVA_FONTS="/usr/share/fonts"

##### Ruby/Rails increase performance #####

## Ruby/Rails GC Tunning ##
# Application will use more memory, but will run much faster (except you are
# messing with heavy C extension like RMagick). It is almost always better
# both in memory and performance concern to run ten workers with tuned GC
# instead of twenty workers without.

# Putting the following in your shell config (eg. ~/.bash_profile) will make
# Rails even faster, but will increase its memory footprint. For most
# applications, this will probably work well for you:

export RUBY_GC_MALLOC_LIMIT=60000000
export RUBY_FREE_MIN=200000

# If you have a particularly large rails app (say, >100k lines), this seems to
# improve it even more:

# export RUBY_GC_MALLOC_LIMIT=1000000000
# export RUBY_FREE_MIN=500000
# export RUBY_HEAP_MIN_SLOTS=40000

## Use high performance allocators like jemalloc and tcmalloc ##

export LD_PRELOAD=/usr/lib/libtcmalloc_minimal.so.0.1.0

# It will give you ~8-10% of performance for free. Memory consumption could
# increase or decrease... it is hard to predict.

##### Source: https://gist.github.com/1688857 #####
#####         https://gist.github.com/4136373 #####


# End of ~/.shell_env