#!/usr/bin/env bash
# ~/.shell_functions
# Last Modified: 07/05/2015 05:33 AM

# forwarded port ${2} on server to ${1} on the local (client)
# Usage: ssh_tunnel 5900 5901 mrtux@hdvietnam
ssh_tunnel () {
    ssh -L "${1}":localhost:"${2}" -N -f "${3}"
}

# create SOCKS 5 proxy on local (client) at port {1}
# Usage: create_ssh_proxy_at_port 9999 mrtux@hdvietnam
create_ssh_proxy_at_port () {
    ssh -f -C2qTnN -D "${1}" "${2}"
}

# Get information about IP address
ipinfo () {
    curl -s ipinfo.io/"${1}"
}

# Lookup MAC vendor
macvendorlookup () {
    curl -s "http://www.macvendorlookup.com/api/v2/$*" | jq '.[] | .company'
    # curl -s "http://api.macvendors.com/$*"
}

### OpenSSL shortcut ###
openssl-view-certificate () {
    openssl x509 -text -noout -in "${1}"
}

openssl-view-csr () {
    openssl req -text -noout -verify -in "${1}"
}

openssl-view-key () {
    openssl rsa -check -in "${1}"
}

openssl-view-pkcs12 () {
    openssl pkcs12 -info -in "${1}"
}

# Connecting to a server (Ctrl C exits)
openssl-client () {
    openssl s_client -status -connect "${1}":443
}

# Convert PEM private key, PEM certificate and PEM CA certificate (used by nginx, Apache, and other openssl apps) to a PKCS12 file (typically for use with Windows or Tomcat)
openssl-convert-pem-to-p12 () {
    openssl pkcs12 -export -inkey "${1}" -in "${2}" -certfile "${3}" -out "${4}"
}

# Convert a PKCS12 file to PEM
openssl-convert-p12-to-pem () {
    openssl pkcs12 -nodes -in "${1}" -out "${2}"
}

# Check the modulus of a certificate (to see if it matches a key)
openssl-check-certificate-modulus () {
    openssl x509 -noout -modulus -in "${1}" | shasum -a 256
}

# Check the modulus of a key (to see if it matches a certificate)
openssl-check-key-modulus () {
    openssl rsa -noout -modulus -in "${1}" | shasum -a 256
}

# Check the modulus of a certificate request
openssl-check-key-modulus () {
    openssl req -noout -modulus -in "${1}" | shasum -a 256
}

# Encrypt a file (because zip crypto isn't secure)
openssl-encrypt () {
    openssl aes-256-cbc -salt -in "${1}" -out "${2}"
}

# Decrypt a file
openssl-decrypt () {
    openssl aes-256-cbc -d -in "${1}" -out "${2}"
}

# Public Diffie-Hellman Parameter Service/Tool
# https://2ton.com.au/dhtool/
dhparam () {
    size=${1:-4096}
    curl -sSL "https://2ton.com.au/dhparam/$size" -o dhparam.pem
}

weather () {
    location=${1:-sgn} # sgn: HCM, han: HN
    curl -4 "http://wttr.in/${location}"
}

# bashlogger
bashlogger () {
    script /tmp/log.txt
}

# Install docker-compose latest version
install-dcp () {
    fname="docker-compose-$(uname -s)-$(uname -m)"
    fbin="/home/mrtux/.local/bin/docker-compose"
    fcomp="$HOME/.local/share/zsh/site-functions/_docker-compose"

    repos_dl="https://github.com/docker/compose/releases/download"
    repos_api="https://api.github.com/repos/docker/compose/releases/latest"
    version=$(curl -sSL ${repos_api} | jq -r '. | .tag_name')

    # download and install binary
    /bin/rm -f "$fbin"
    curl -sSL "${repos_dl}/${version}/${fname}" -o "${fbin}"
    chmod +x $fbin

    # download and install zsh completion
    /bin/rm -f "${fcomp}"
    curl -sSL https://raw.githubusercontent.com/docker/compose/"${version}"/contrib/completion/zsh/_docker-compose -o "${fcomp}"
}

# Install docker-machine latest version
install-dcm () {
    fname="docker-machine-$(uname -s)-$(uname -m)"
    fbin="/home/mrtux/.local/bin/docker-machine"
    fcomp="$HOME/.local/share/zsh/site-functions/_docker-machine"

    repos_dl="https://github.com/docker/machine/releases/download"
    repos_api="https://api.github.com/repos/docker/machine/releases/latest"
    version=$(curl -sSL ${repos_api} | jq -r '. | .tag_name')

    # download and install binary
    /bin/rm -f "$fbin"
    curl -sSL "${repos_dl}/${version}/${fname}" -o "${fbin}"
    chmod +x $fbin

    # download and install zsh completion
    /bin/rm -f "${fcomp}"
    curl -sSL https://raw.githubusercontent.com/docker/machine/"${version}"/contrib/completion/zsh/_docker-machine -o "${fcomp}"
}

# Install Terraform latest version
install-terraform () {
    repos_api="https://api.github.com/repos/hashicorp/terraform/releases/latest"
    # remove first character with ${VAR#?}
    version=${$(curl -sSL $repos_api | jq -r '. | .tag_name')#?}
    repos_dl="https://releases.hashicorp.com/terraform/${version}/terraform_${version}_linux_amd64.zip"
    curl -sSL $repos_dl -o /tmp/terraform.zip
    unzip -qq -o -d /home/mrtux/.local/bin /tmp/terraform.zip
    /bin/rm -f /tmp/terraform.zip
}


# Install Protobuf complier latest version
install-protoc () {
    repos_api="https://api.github.com/repos/google/protobuf/releases/latest"
    # remove first character with ${VAR#?}
    version=${$(curl -sSL $repos_api | jq -r '. | .tag_name')#?}
    repos_dl="https://github.com/google/protobuf/releases/download/v${version}/protoc-${version}-linux-x86_64.zip"
    curl -sSL $repos_dl -o /tmp/protoc.zip
    sudo unzip -qq -o -d /usr/local/ /tmp/protoc.zip
    /bin/rm -f /tmp/protoc.zip
}


# Install cli53 (golang) latest version
install-cli53 () {
    fname="cli53-linux-amd64"
    fbin="/home/mrtux/.local/bin/cli53"
    repos_dl="https://github.com/barnybug/cli53/releases/download"
    repos_api="https://api.github.com/repos/barnybug/cli53/releases/latest"
    version=$(curl -sSL $repos_api | jq -r '. | .tag_name')
    /bin/rm -f "$fbin"
    curl -sSL $repos_dl/"$version"/"$fname" -o "$fbin"
    chmod +x $fbin
}


# Usage: install-kubectl 1.2.4
install-kubectl() {
    [[ -n $1 ]] && curl -sSL https://storage.googleapis.com/kubernetes-release/release/v"${1}"/bin/linux/amd64/kubectl -o ~/Applications/google-cloud-sdk/bin/kubectl
}

transfer() {
    # check arguments
    if [ $# -eq 0 ];
    then
        printf "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
        return 1
    fi

    # get temporarily filename, output is written to this file show progress can be showed
    tmpfile=$( mktemp -t transferXXX )

    # upload stdin or file
    file=$1

    if tty -s;
    then
        basefile=$(basename "$file" | sed -e 's/[^a-zA-Z0-9._-]/-/g')

        if [ ! -e "$file" ];
        then
            echo "File $file doesn't exists."
            return 1
        fi

        if [ -d "$file" ];
        then
            # zip directory and transfer
            zipfile=$( mktemp -t transferXXX.zip )
            cd "$(dirname "$file")" && zip -r -q - "$(basename "$file")" >> "$zipfile"
            curl --progress-bar --upload-file "$zipfile" "https://transfer.sh/$basefile.zip" >> "$tmpfile"
            rm -f "$zipfile"
        else
            # transfer file
            curl --progress-bar --upload-file "$file" "https://transfer.sh/$basefile" >> "$tmpfile"
        fi
    else
        # transfer pipe
        curl --progress-bar --upload-file "-" "https://transfer.sh/$file" >> "$tmpfile"
    fi

    # cat output link
    cat "$tmpfile"

    # cleanup
    rm -f "$tmpfile"
}

# echo "You can simulate on-screen typing just like in the movies" | pv -qL 10
typing-echo () {
    echo "$@" | pv -qL 10
}

# fast-sync user@<source>:<source_dir> <dest_dir>
fast-sync () {
    rsync -aHAXxv --numeric-ids --delete --progress \
          -e "ssh -T -c arcfour -o Compression=no -x" "$@"
}

# End of file
